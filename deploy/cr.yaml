apiVersion: psmdb.percona.com/v1
kind: PerconaServerMongoDB
metadata:
  name: my-cluster-name
spec:
#  platform: openshift
  image: percona/percona-server-mongodb-operator:1.1.0-mongod4.0
  imagePullPolicy: Always
#  imagePullSecrets:
#    - name: private-registry-credentials
#  runUid: 1001
  allowUnsafeConfigurations: false
#  updateStrategy: RollingUpdate
  secrets:
    users: my-cluster-name-secrets
  pmm:
    enabled: true
    image: forekshub/percona-mongodb-exporter
    serverHost: monitoring-service
  replsets:
  - name: rs0
    size: 3
    affinity:
      antiAffinityTopologyKey: "kubernetes.io/hostname"
#      advanced:
#        nodeAffinity:
#          requiredDuringSchedulingIgnoredDuringExecution:
#            nodeSelectorTerms:
#            - matchExpressions:
#              - key: kubernetes.io/e2e-az-name
#                operator: In
#                values:
#                - e2e-az1
#                - e2e-az2
#    tolerations: 
#    - key: "node.alpha.kubernetes.io/unreachable"
#      operator: "Exists"
#      effect: "NoExecute"
#      tolerationSeconds: 6000
#    priorityClassName: high-priority
#    annotations:
#      iam.amazonaws.com/role: role-arn
#    labels:
#      rack: rack-22
#    nodeSelector:
#      disktype: ssd
    podDisruptionBudget:
      maxUnavailable: 1
#      minAvailable: 0
    expose:
      enabled: false
      exposeType: LoadBalancer
    arbiter:
      enabled: false
      size: 1
      affinity:
       antiAffinityTopologyKey: "kubernetes.io/hostname"
#       advanced:
#         nodeAffinity:
#           requiredDuringSchedulingIgnoredDuringExecution:
#             nodeSelectorTerms:
#             - matchExpressions:
#               - key: kubernetes.io/e2e-az-name
#                 operator: In
#                 values:
#                 - e2e-az1
#                 - e2e-az2
#     tolerations: 
#     - key: "node.alpha.kubernetes.io/unreachable"
#       operator: "Exists"
#       effect: "NoExecute"
#       tolerationSeconds: 6000
#     priorityClassName: high-priority
#     annotations:
#       iam.amazonaws.com/role: role-arn
#     labels:
#       rack: rack-22
#     nodeSelector:
#       disktype: ssd
    resources:
      limits:
        cpu: "300m"
        memory: "0.5G"
      requests:
        cpu: "300m"
        memory: "0.5G"
    volumeSpec:
#      emptyDir: {}
#      hostPath:
#        path: /data
#        type: Directory
      persistentVolumeClaim:
#        storageClassName: standard
#        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 3Gi
  mongod:
    net:
      port: 27017
      hostPort: 0
    security:
      redactClientLogData: false
      enableEncryption: true
      encryptionKeySecret: my-cluster-name-mongodb-encryption-key
      encryptionCipherMode: AES256-CBC
    setParameter:
      ttlMonitorSleepSecs: 60
      wiredTigerConcurrentReadTransactions: 128
      wiredTigerConcurrentWriteTransactions: 128
    storage:
      engine: wiredTiger
      inMemory:
        engineConfig:
          inMemorySizeRatio: 0.9
      mmapv1:
        nsSize: 16
        smallfiles: false
      wiredTiger:
        engineConfig:
          cacheSizeRatio: 0.5
          directoryForIndexes: false
          journalCompressor: snappy
        collectionConfig:
          blockCompressor: snappy
        indexConfig:
          prefixCompression: true
    operationProfiling:
      mode: slowOp
      slowOpThresholdMs: 100
      rateLimit: 100
#    auditLog:
#      destination: file
#      format: BSON
#      filter: '{}'
  backup:
    enabled: true
    debug: true
    restartOnFailure: true
    image: percona/percona-server-mongodb-operator:1.1.0-backup
    serviceAccountName: percona-server-mongodb-operator
    coordinator:
      enableClientsLogging: true
      resources:
        limits:
          cpu: "100m"
          memory: "0.2G"
        requests:
          cpu: "100m"
          memory: "0.1G"
          storage: "1Gi"
      #storageClass: aws-gp2
      affinity:
       antiAffinityTopologyKey: "kubernetes.io/hostname"
#       advanced:
#         nodeAffinity:
#           requiredDuringSchedulingIgnoredDuringExecution:
#             nodeSelectorTerms:
#             - matchExpressions:
#               - key: kubernetes.io/e2e-az-name
#                 operator: In
#                 values:
#                 - e2e-az1
#                 - e2e-az2
#     tolerations: 
#     - key: "node.alpha.kubernetes.io/unreachable"
#       operator: "Exists"
#       effect: "NoExecute"
#       tolerationSeconds: 6000
#     priorityClassName: high-priority
#     annotations:
#       iam.amazonaws.com/role: role-arn
#     labels:
#       rack: rack-22
#     nodeSelector:
#       disktype: ssd
    storages:
#      s3-us-west:
#        type: s3
#        s3:
#          bucket: S3-BACKUP-BUCKET-NAME-HERE
#          credentialsSecret: my-cluster-name-backup-s3
#          region: us-west-2
#      minio:
#        type: s3
#        s3:
#          bucket: MINIO-BACKUP-BUCKET-NAME-HERE
#          region: us-east-1
#          credentialsSecret: my-cluster-name-backup-minio
#          endpointUrl: http://minio.psmdb.svc.cluster.local:9000/minio/
    tasks:
#      - name: daily-s3-us-west
#        enabled: true
#        schedule: "0 0 * * *"
#        storageName: s3-us-west
#        compressionType: gzip
#      - name: weekly-s3-us-west
#        enabled: false
#        schedule: "0 0 * * 0"
#        storageName: s3-us-west
#        compressionType: gzip
